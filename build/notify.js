"use strict";

/* Notify v0.1.0 */

var Notify = function Notify(selector, options) {
  var _this = this;
  this.el = this.getEl(selector);
  this.order = options.order || "default";
  this.closingDelay = parseInt(options.closingDelay) || 0;
  this.removingDelay = parseInt(options.removingDelay) || 3000;

  this.itemsCounter = 0;
  this.notifyList = {};

  this.orderConfig = {
    "default": "beforeEnd",
    reverse: "afterBegin"
  };

  this.el.addEventListener("click", function (e) {
    var classes = e.target.classList;
    if (classes.contains("notify__close")) {
      _this.close("#" + e.target.parentNode.id);
    }
  }, false);

  this.el.addEventListener("mouseover", function (e) {
    Object.keys(_this.notifyList).forEach(function (e) {
      clearTimeout(_this.notifyList[e].timeout);
    });
  }, true);

  this.el.addEventListener("mouseout", function (e) {
    Object.keys(_this.notifyList).forEach(function (item) {
      _this.notifyList[item].timeout = _this.setClosingDelay(item);
    });
  }, true);
};

Notify.prototype.getEl = function (arg) {
  if (typeof arg == "string") {
    return document.querySelector(arg);
  } else {
    return arg;
  }
};

Notify.prototype.setClosingDelay = function (item) {
  var _this2 = this;
  if (this.closingDelay) {
    var timeout = setTimeout(function () {
      _this2.close(item);
    }, this.closingDelay);

    return timeout;
  }
};

Notify.prototype.add = function (text) {
  var that = this;
  var timeout;
  var i = ++this.itemsCounter;
  var link = this.el.querySelector("#notify_" + i);
  this.el.insertAdjacentHTML(this.orderConfig[this.order], "<div class=\"notify__item\" id=\"notify_" + i + "\">\n          <div class=\"notify__close\">Ã—</div>\n          <div class=\"notify__content\">" + text + "</div>\n      </div>");
  timeout = this.setClosingDelay("#notify_" + i);
  that.notifyList["#notify_" + i] = { timeout: timeout, link: link };

  return this;
};

Notify.prototype.close = function (sel) {
  var _this3 = this;
  var el = this.getEl(sel);
  el.classList.add("notify--closing");

  setTimeout(function () {
    // debugger;
    _this3.el.removeChild(el);
    // console.log(this.notifyList[sel]);
    if (_this3.notifyList[sel].timeout) {
      clearTimeout(_this3.notifyList[sel].timeout);
    }
    delete _this3.notifyList[sel];
    if (Object.keys(_this3.notifyList).length == 0) {
      _this3.itemsCounter = 0;
    }
  }, this.removingDelay);

  return this;
};
//# sourceMappingURL=data:application/json;base64,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ZmlsZSI6Im5vdGlmeS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIE5vdGlmeSB2MC4xLjAgKi9cclxuXHJcbmNsYXNzIE5vdGlmeSB7XHJcbiAgY29uc3RydWN0b3Ioc2VsZWN0b3IsIG9wdGlvbnMpIHtcclxuICAgIHRoaXMuZWwgPSB0aGlzLmdldEVsKHNlbGVjdG9yKTtcclxuICAgIHRoaXMub3JkZXIgPSBvcHRpb25zLm9yZGVyIHx8ICdkZWZhdWx0JztcclxuICAgIHRoaXMuY2xvc2luZ0RlbGF5ID0gcGFyc2VJbnQob3B0aW9ucy5jbG9zaW5nRGVsYXkpIHx8IDA7XHJcbiAgICB0aGlzLnJlbW92aW5nRGVsYXkgPSBwYXJzZUludChvcHRpb25zLnJlbW92aW5nRGVsYXkpIHx8IDMwMDA7XHJcblxyXG4gICAgdGhpcy5pdGVtc0NvdW50ZXIgPSAwO1xyXG4gICAgdGhpcy5ub3RpZnlMaXN0ID0ge307XHJcblxyXG4gICAgdGhpcy5vcmRlckNvbmZpZyA9IHtcclxuICAgICAgJ2RlZmF1bHQnOiAnYmVmb3JlRW5kJyxcclxuICAgICAgJ3JldmVyc2UnOiAnYWZ0ZXJCZWdpbidcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgIHZhciBjbGFzc2VzID0gZS50YXJnZXQuY2xhc3NMaXN0O1xyXG4gICAgICBpZiAoY2xhc3Nlcy5jb250YWlucygnbm90aWZ5X19jbG9zZScpKSB7XHJcbiAgICAgICAgdGhpcy5jbG9zZSgnIycgKyBlLnRhcmdldC5wYXJlbnROb2RlLmlkKTtcclxuICAgICAgfVxyXG4gICAgfSwgZmFsc2UpO1xyXG5cclxuICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgKGUpID0+IHtcclxuICAgICAgT2JqZWN0LmtleXModGhpcy5ub3RpZnlMaXN0KS5mb3JFYWNoKChlKSA9PiB7XHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMubm90aWZ5TGlzdFtlXS50aW1lb3V0KTtcclxuICAgICAgfSk7XHJcbiAgICB9LCB0cnVlKTtcclxuXHJcbiAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3V0JywgKGUpID0+IHtcclxuICAgICAgT2JqZWN0LmtleXModGhpcy5ub3RpZnlMaXN0KS5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgICAgdGhpcy5ub3RpZnlMaXN0W2l0ZW1dLnRpbWVvdXQgPSB0aGlzLnNldENsb3NpbmdEZWxheShpdGVtKTtcclxuICAgICAgfSk7XHJcbiAgICB9LCB0cnVlKTtcclxuICB9XHJcblxyXG5cclxuICBnZXRFbChhcmcpIHtcclxuICAgIGlmICh0eXBlb2YgYXJnID09ICdzdHJpbmcnKSB7XHJcbiAgICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGFyZyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gYXJnO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0Q2xvc2luZ0RlbGF5KGl0ZW0pIHtcclxuICAgIGlmICh0aGlzLmNsb3NpbmdEZWxheSkge1xyXG4gICAgICB2YXIgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuY2xvc2UoaXRlbSk7XHJcbiAgICAgIH0sIHRoaXMuY2xvc2luZ0RlbGF5KTtcclxuXHJcbiAgICAgIHJldHVybiB0aW1lb3V0O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcblxyXG4gIGFkZCh0ZXh0KSB7XHJcbiAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICB2YXIgdGltZW91dDtcclxuICAgIHZhciBpID0gKyt0aGlzLml0ZW1zQ291bnRlcjtcclxuICAgIHZhciBsaW5rID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yKGAjbm90aWZ5XyR7aX1gKTtcclxuICAgIHRoaXMuZWwuaW5zZXJ0QWRqYWNlbnRIVE1MKHRoaXMub3JkZXJDb25maWdbdGhpcy5vcmRlcl0sXHJcbiAgICAgIGA8ZGl2IGNsYXNzPVwibm90aWZ5X19pdGVtXCIgaWQ9XCJub3RpZnlfJHtpfVwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cIm5vdGlmeV9fY2xvc2VcIj7DlzwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cIm5vdGlmeV9fY29udGVudFwiPiR7dGV4dH08L2Rpdj5cclxuICAgICAgPC9kaXY+YCk7XHJcbiAgICB0aW1lb3V0ID0gdGhpcy5zZXRDbG9zaW5nRGVsYXkoYCNub3RpZnlfJHtpfWApO1xyXG4gICAgdGhhdC5ub3RpZnlMaXN0W2Ajbm90aWZ5XyR7aX1gXSA9IHt0aW1lb3V0LCBsaW5rfTtcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG5cclxuICBjbG9zZShzZWwpIHtcclxuICAgIHZhciBlbCA9IHRoaXMuZ2V0RWwoc2VsKTtcclxuICAgIGVsLmNsYXNzTGlzdC5hZGQoJ25vdGlmeS0tY2xvc2luZycpO1xyXG5cclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAvLyBkZWJ1Z2dlcjtcclxuICAgICAgdGhpcy5lbC5yZW1vdmVDaGlsZChlbCk7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMubm90aWZ5TGlzdFtzZWxdKTtcclxuICAgICAgaWYgKHRoaXMubm90aWZ5TGlzdFtzZWxdLnRpbWVvdXQpIHsgXHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMubm90aWZ5TGlzdFtzZWxdLnRpbWVvdXQpO1xyXG4gICAgICB9XHJcbiAgICAgIGRlbGV0ZSB0aGlzLm5vdGlmeUxpc3Rbc2VsXTtcclxuICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMubm90aWZ5TGlzdCkubGVuZ3RoID09IDApIHtcclxuICAgICAgICB0aGlzLml0ZW1zQ291bnRlciA9IDA7XHJcbiAgICAgIH1cclxuICAgIH0sIHRoaXMucmVtb3ZpbmdEZWxheSk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==