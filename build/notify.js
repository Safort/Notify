"use strict";

/* Notify v0.2.0 */

var Notify = function Notify(selector, options) {
  var _this = this;
  if (options === undefined) options = {};
  this.el = this.getEl(selector);
  this.order = options.order || "default";
  this.closingDelay = parseInt(options.closingDelay) || 0;
  this.removingDelay = parseInt(options.removingDelay) || 3000;

  this.itemsCounter = 0;
  this.notifyList = {};

  this.orderConfig = {
    "default": "beforeEnd",
    reverse: "afterBegin"
  };

  this.notifyTypes = {
    error: "notify__error",
    warning: "notify__warning",
    success: "notify__success",
    "default": "notify__default"
  };

  this.el.addEventListener("click", function (e) {
    var classes = e.target.classList;
    if (classes.contains("notify__close")) {
      _this.close("#" + e.target.parentNode.id);
    }
  }, false);

  this.el.addEventListener("mouseover", function (e) {
    Object.keys(_this.notifyList).forEach(function (e) {
      clearTimeout(_this.notifyList[e].timeout);
    });
  }, true);

  this.el.addEventListener("mouseout", function (e) {
    Object.keys(_this.notifyList).forEach(function (item) {
      _this.notifyList[item].timeout = _this.setClosingDelay(item);
    });
  }, true);
};

Notify.prototype.getEl = function (arg) {
  if (typeof arg == "string") {
    return document.querySelector(arg);
  } else {
    return arg;
  }
};

Notify.prototype.setClosingDelay = function (item, closingDelay) {
  var _this2 = this;
  if (closingDelay === undefined) closingDelay = this.closingDelay;
  if (this.closingDelay) {
    var timeout = setTimeout(function () {
      _this2.close(item);
    }, this.closingDelay);

    return timeout;
  }
};

Notify.prototype.add = function (text, options) {
  if (options === undefined) options = {};
  var timeout;
  var i = ++this.itemsCounter;
  var link = this.el.querySelector("#notify_" + i);
  var itemClasses = "notify__item";

  if (options.type) {
    itemClasses += " " + this.notifyTypes[options.type];
  } else {
    itemClasses += " " + this.notifyTypes["default"];
  }

  this.el.insertAdjacentHTML(this.orderConfig[this.order], "<div class=\"" + itemClasses + "\" id=\"notify_" + i + "\">\n          <div class=\"notify__close\">Ã—</div>\n          <div class=\"notify__content\">" + text + "</div>\n      </div>");
  timeout = this.setClosingDelay("#notify_" + i, options.closingDelay || this.closingDelay);
  this.notifyList["#notify_" + i] = { timeout: timeout, link: link };

  return this;
};

Notify.prototype.close = function (sel) {
  var _this3 = this;
  var el = this.getEl(sel);

  el.classList.add("notify--closing");

  setTimeout(function () {
    if (_this3.notifyList[sel]) {
      _this3.el.removeChild(el);

      if (_this3.notifyList[sel].timeout) {
        clearTimeout(_this3.notifyList[sel].timeout);
      }

      delete _this3.notifyList[sel];

      if (Object.keys(_this3.notifyList).length == 0) {
        _this3.itemsCounter = 0;
      }
    }
  }, this.removingDelay);

  return this;
};

Notify.prototype.closeAll = function () {
  var self = this;
  var items = this.el.querySelectorAll(".notify__item");

  Array.prototype.forEach.call(items, function (item) {
    self.close("#" + item.id);
  });
};

Notify.prototype.closeFirst = function () {
  var item = this.el.querySelector(":first-child");

  if (item) {
    this.close("#" + item.id);
  }
};

Notify.prototype.closeLast = function () {
  var item = this.el.querySelector(".notify__item:last-child");

  if (item) {
    this.close("#" + item.id);
  }
};
//# sourceMappingURL=data:application/json;base64,